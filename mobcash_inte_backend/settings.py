"""
Django settings for mobcash_inte_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_TEMPLATE = os.path.join(BASE_DIR, "templates")
from dotenv import load_dotenv
load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "api.turaincash.com",
    "127.0.0.1",
    "api.turaincash.net",
    "api.zefast.net",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "daphne", "django.contrib.staticfiles",
    "mobcash_inte",
    "accounts",
    "django_filters",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",
    "rest_framework_simplejwt.token_blacklist",
    "django_celery_results",
    "django_celery_beat",
    "fcm_django",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://localhost",
]


CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)

CORS_ALLOW_HEADERS = ["*"]

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'mobcash_inte_backend.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_TEMPLATE],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'mobcash_inte_backend.wsgi.application'
ASGI_APPLICATION = "mobcash_inte_backend.asgi.application"
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST"),
        "PORT": "5432",
    }
}

AUTH_USER_MODEL = "accounts.User"
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = "/var/www/mobcash/static/"

# Configuration des fichiers médias
MEDIA_ROOT = "/var/www/mobcash/media/"
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(exist_ok=True)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # === FORMATTERS ===
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {message}",
            "style": "{",
        },
        "celery": {
            "format": "[{asctime}] {levelname} {name}: {message}",
            "style": "{",
        },
        "transaction": {
            "format": "{asctime} | {levelname} | {name} | {funcName} | {message}",
            "style": "{",
        },
        "audit": {
            "format": "[AUDIT] | {asctime} | {levelname} | {name} | {message}",
            "style": "{",
        },
        "security_safe": {
            "format": "SECURITY | {asctime} | {levelname} | {message}",
            "style": "{",
        },
        # ✅ NOUVEAU: Formateur léger pour la console en développement
        "console_dev": {
            "format": "{levelname} {asctime} {name}: {message}",
            "style": "{",
        },
        "betting_detailed": {
            "format": "[{asctime}] {levelname} | {name} | {message}",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    # === FILTERS ===
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    # === HANDLERS ===
    "handlers": {
        # ✅ CORRIGÉ: Console - niveau INFO pour réduire le bruit
        "console": {
            "level": "INFO",  # ✅ INFO au lieu de DEBUG pour moins de bruit
            "class": "logging.StreamHandler",
            "formatter": "console_dev",  # ✅ Formateur plus léger
        },
        # Fichier général de l'application
        "file_general": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "django_general.log",
            "maxBytes": 1024 * 1024 * 15,  # 15MB
            "backupCount": 5,
            "formatter": "verbose",
        },
        # Fichier pour les erreurs uniquement
        "file_errors": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "django_errors.log",
            "maxBytes": 1024 * 1024 * 15,  # 15MB
            "backupCount": 5,
            "formatter": "verbose",
        },
        # Fichier pour Celery
        "file_celery": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "celery.log",
            "maxBytes": 1024 * 1024 * 15,  # 15MB
            "backupCount": 5,
            "formatter": "celery",
        },
        # Fichier pour les transactions (transferts d'argent)
        "file_transactions": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "transactions.log",
            "maxBytes": 1024 * 1024 * 50,  # 50MB pour les transactions
            "backupCount": 10,
            "formatter": "transaction",
        },
        "audit_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "audit.log",
            "formatter": "audit",
            "maxBytes": 1024 * 1024 * 50,  # 50MB
            "backupCount": 5,
        },
        # Fichier pour la sécurité
        "file_security": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "security.log",
            "maxBytes": 1024 * 1024 * 25,  # 25MB
            "backupCount": 5,
            "formatter": "security_safe",
        },
        # Fichier pour les APIs externes (Flutterwave, Stripe, etc.)
        "file_external_apis": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "external_apis.log",
            "maxBytes": 1024 * 1024 * 25,  # 25MB
            "backupCount": 5,
            "formatter": "verbose",
        },
        # Handler pour les emails d'alerte (production)
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "formatter": "verbose",
        },
        # Handler pour logs quotidiens (archivage)
        "file_daily": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": LOGS_DIR / "daily.log",
            "when": "midnight",
            "interval": 1,
            "backupCount": 30,  # Garder 30 jours
            "formatter": "verbose",
        },
        # Fichier dédié aux transactions de paris
        "betting_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "betting_transactions.log",
            "maxBytes": 1024 * 1024 * 50,  # 50MB
            "backupCount": 5,
            "formatter": "betting_detailed",
        },
        # Fichier pour les erreurs critiques betting
        "betting_errors": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "betting_errors.log",
            "maxBytes": 1024 * 1024 * 25,  # 25MB
            "backupCount": 5,
            "formatter": "betting_detailed",
        },
    },
    # === LOGGERS ===
    "loggers": {
        "connect_pro.payments": {
            "handlers": ["console", "file_transactions", "file_general"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # ✅ CORRIGÉ: Logger racine Django - niveau INFO pour réduire le bruit
        "django": {
            "handlers": ["console", "file_general", "file_errors"],
            "level": "DEBUG" if DEBUG else "WARNING",  # ✅ INFO au lieu de DEBUG
            "propagate": False,
        },
        # ✅ NOUVEAU: Logger spécifique pour autoreload - masquer les logs de debug
        "django.utils.autoreload": {
            "handlers": ["file_general"],  # ✅ Pas de console pour autoreload
            "level": "WARNING",  # ✅ Seulement les warnings et erreurs
            "propagate": False,
        },
        # ✅ NOUVEAU: Logger pour les migrations - réduire le bruit
        "django.db.migrations": {
            "handlers": ["file_general"],  # ✅ Pas de console pour les migrations
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # ✅ NOUVEAU: Logger pour les requêtes DB - masquer en développement
        "django.db.backends": {
            "handlers": ["file_general"],  # ✅ Pas de console pour les requêtes SQL
            "level": "INFO" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Logger pour les requests Django
        "django.request": {
            "handlers": ["console", "file_errors", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        # Logger pour la sécurité Django
        "django.security": {
            "handlers": ["console", "file_security"],
            "level": "WARNING",
            "propagate": False,
        },
        # Logger Celery
        "celery": {
            "handlers": ["console", "file_celery"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Logger pour vos tâches Celery
        "celery.task": {
            "handlers": ["console", "file_celery"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # ✅ CORRIGÉ: Logger pour votre application principale
        "connect_pro": {
            "handlers": ["console", "file_general", "file_daily"],
            "level": "DEBUG" if DEBUG else "WARNING",  # ✅ Garder DEBUG pour votre app
            "propagate": False,
        },
        # Logger spécifique pour les transactions
        "connect_pro.transactions": {
            "handlers": ["file_transactions", "console"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        "connect_pro.payments.audit": {
            "handlers": ["audit_file", "console"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Logger pour la sécurité
        "connect_pro.security": {
            "handlers": ["console", "file_security", "mail_admins"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Logger pour les APIs externes
        "connect_pro.external_apis": {
            "handlers": ["file_external_apis", "console"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Logger pour les wallets
        "connect_pro.wallets": {
            "handlers": ["file_transactions", "console"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Logger pour KYC
        "connect_pro.kyc": {
            "handlers": ["file_security", "file_general", "console"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Logger principal betting
        "betting_transactions": {
            "handlers": ["console", "betting_file", "betting_errors"],
            "level": "INFO",
            "propagate": False,
        },
        # Logger pour l'API externe
        "betting_api": {
            "handlers": ["console", "betting_file", "betting_errors"],
            "level": "INFO",
            "propagate": False,
        },
    },
    # ✅ CORRIGÉ: Logger root - niveau INFO pour réduire le bruit
    "root": {
        "level": "INFO",  # ✅ INFO au lieu de DEBUG
        "handlers": ["console", "file_general"],
    },
}

BASE_URL = "https://api.blaffa.net/blaffa"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    #'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    #'PAGE_SIZE': 5,
    #'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

SIMPLE_JWT = {
    "ROTATE_REFRESH_TOKENS": True,
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=500),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "BLACKLIST_AFTER_ROTATION": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "TOKEN_BLACKLIST_ENABLED": True,
    "ROTATE_REFRESH_TOKENS": True,
    "UPDATE_LAST_LOGIN": False,
}

"""CELERY CONFIGURATION"""
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# NOUVELLES LIGNES À AJOUTER
CELERY_WORKER_CONCURRENCY = 5
CELERY_TASK_SOFT_TIME_LIMIT = 220
# CELERY_TASK_TIME_LIMIT = 600  # 10 minutes
CELERY_WORKER_PREFETCH_MULTIPLIER = 1


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_HOST_USER = "blaffa7@gmail.com"
EMAIL_HOST_PASSWORD = os.getenv("BETPAY_EMAIL_PASSWORD")
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("localhost", 6379)],
            "capacity": 1500,
            "expiry": 10,
        },
    },
}
